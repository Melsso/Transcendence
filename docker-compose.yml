services:
  # Backend service
  backend:
    build:
      context: ./backend
      args:
        - ACTIVE_HOST=${ACTIVE_HOST}
    container_name: pong-backend-container    
    volumes:
      - ./backend:/app
      - media:/app/api/media
    depends_on:
      - database
      - vault
      - redis
    env_file:
     - .env
    networks:
      - pong-network
    restart: on-failure

  # Database service
  database:
    build:
      context: ./database
    container_name: pong-database-container
    ports:
      - "0.0.0.0:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    depends_on:
      - vault
    env_file:
      - .env
    networks:
      - pong-network

  # Frontend service
  frontend:
    build:
      context: ./frontend
      args:
        - ACTIVE_HOST=${ACTIVE_HOST}
    container_name: pong-frontend-container
    volumes:
      - media:/usr/share/nginx/html/media
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    depends_on:
      - backend
    networks:
      - pong-network
    restart: on-failure
  
  # Redis service
  redis:
    image: redis:alpine
    container_name: pong-redis-container
    ports:
      - "0.0.0.0:6379:6379"
    networks:
      - pong-network

  # Vault service
  vault:
    build:
      context: ./vault
    container_name: pong-vault-container
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
    volumes:
      - ./vault/init-vault.sh:/docker-entrypoint-initdb.d/init-vault.sh
      - vault_data:/vault/data
    env_file:
      - .env
    networks:
      - pong-network
    restart: unless-stopped

volumes:
  postgres_data:
  media:
  vault_data:

networks:
  pong-network:
    driver: bridge

